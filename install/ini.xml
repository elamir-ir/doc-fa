<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<chapter xml:id="configuration" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>پیکربندی زمان‌اجرا</title>
 
 <sect1 xml:id="configuration.file">
  <title>فایل پیکربندی</title>
  
  <simpara>
   فایل پیکربندی  (&php.ini;)
   زمانی که برنامه اجرا می‌شود، خوانده می‌شود.
  برای نسخه های ماژول PHP
   این فقط یک بار زمانی که وب سرور راه اندازی می شود اتفاق می افتد. برای
   نسخه‌های <acronym>CGI</acronym> و <acronym>CLI</acronym>، این اتفاق در
   هر فراخوانی رخ می‌دهد


  </simpara>
  <para>
   &php.ini; : در این آردس ها یافت می‌شود (به ترتیب)
   <itemizedlist>
    <listitem>
     <simpara>
     مکان خاص ماژول SAPI (دستورالعمل <literal>PHPIniDir</literal>
      در آپاچی 2، گزینه خط فرمان <literal>-c</literal> در CGI و CLI)
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      متغیر طبیعی  <varname>PHPRC</varname> 
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      آدرس فایل  <literal>php.ini</literal> 
      را می توان برای نسخه های مختلف PHP تنظیم کرد. ریشه کلیدهای رجیستری به 32 یا 64 بیتی سیستم عامل و PHP نصب شده بستگی دارد.
     برای PHP 32 بیتی در سیستم عامل 32 بیتی یا PHP 64 بیتی در سیستم عامل 64 بیتی، از <literal>[(HKEY_LOCAL_MACHINE\SOFTWARE\PHP]</literal> برای نسخه 32 بیتی PHP در سیستم عامل 64-بیتی استفاده کنید. بیت OS از <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\PHP]</literal>] استفاده می کند.
      برای نصب بیتی مشابه کلیدهای رجیستری زیر را انجام دهید
      به ترتیب بررسی می شوند:
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y.z]</literal>,
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y]</literal> و
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x]</literal>, 
      که در آن x، y و z به معنای نسخه اصلی، مینور و نسخه PHP است.
      برای نسخه های 32 بیتی PHP در سیستم عامل 64 بیتی، کلیدهای رجیستری زیر به ترتیب بررسی می شوند:
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6421Node\PHP\x.y.z]</literal>,
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6421Node\PHP\x.y]</literal> و
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6421Node\PHP\x]</literal>, 
      که در آن x، y و z به معنای نسخه اصلی، مینور و نسخه PHP است.
      اگر مقداری برای <literal>IniFilePath</literal> در هر یک از این کلیدها وجود داشته باشد، اولین مورد یافت شده به عنوان مکان <literal>php.ini</literal> استفاده خواهد شد. (فقط ویندوز).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP]</literal> یا
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\PHP]</literal>, مقدار
      <literal>IniFilePath</literal> (Windows only).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      پوشه کاری فعلی (به جز CLI).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      پوشه وب سرور (برای ماژول های SAPI)، یا پوشه PHP (در غیر این صورت در ویندوز).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      پوشه ویندوز
       (<filename class="directory">C:\windows</filename>
      یا  <filename class="directory">C:\winnt</filename>) (برای ویندوز), یا
      <literal>--with-config-file-path</literal> گزینه زمان کامپایل
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   اگر <filename>php-SAPI.ini</filename> وجود داشته باشد (که  SAPI در حال استفاده است، به عنوان مثال، <filename>php-cli.ini</filename> یا
   <filename>php-apache.ini</filename>)، به جای &php.ini; استفاده می شود.
نام SAPI را می توان با <function>php_sapi_name</function> تعیین کرد.
  </para>
  <note>
   <para>
    وب سرور آپاچی هنگام استارت‌آپ پوشه را به حالت تغییر می‌دهد و باعث می‌شود PHP سعی کند فایل &php.ini را در صورت وجود بخواند.
   </para>
  </note>
  <para>
   استفاده از متغیرهای محیطی در &php.ini; همانطور که در زیر نشان داده شده است.
  </para>
  <para>
   <example>
    <title>&php.ini; متغیر محیطی</title>
     <programlisting role="ini">
<![CDATA[
; PHP_MEMORY_LIMIT is taken from environment
memory_limit = ${PHP_MEMORY_LIMIT}
]]>
     </programlisting>
    </example>
  </para>
  <para>
&php.ini; دستورالعمل هایی که توسط برنامه های افزودنی مدیریت می شوند در صفحات مربوطه خود برنامه های افزودنی مستند می شوند. <link linkend="ini">لیست دستورالعمل های اصلی</link> در پیوست موجود است. همه دستورالعمل‌های PHP لزوماً در این راهنما ثبت نمی‌شوند: برای فهرست کامل دستورالعمل‌های موجود در نسخه PHP، لطفاً &php.ini خود را که به خوبی نظر داده شده است، بخوانید. فایل. همچنین، می‌توانید <link xlink:href="&url.php.git.phpini;">آخرین &php.ini;</link> را از Git بیابید.
   نیز مفید است.
  </para>
  <para>
   <example>
    <title>&php.ini; مثال</title>
    <programlisting role="ini">
<![CDATA[
; هر متنی در یک خط پس از نقطه ویرگول (;) نقل قول نشده نادیده گرفته می شود
[php] ; نشانگرهای بخش (متن داخل پرانتز) نیز نادیده گرفته می شوند
; مقادیر بولی را می توان به یکی از موارد زیر تنظیم کرد:
;    true, on, yes
; or false, off, no, none
register_globals = off
track_errors = yes

;می توانید رشته ها را در دو گیومه قرار دهید
شامل_مسیر = ".:/usr/local/lib/php"

; با بک‌اسلش مانند هر کاراکتر دیگری رفتار می شود
شامل_مسیر = ".;c:\php\lib"
]]>
    </programlisting>
    <!-- TODO: add more details about values and expressions -->
   </example>
  </para>
  <para>
   می توان به متغیرهای .ini موجود در فایل های .ini اشاره کرد 
   مثال : <literal>open_basedir = ${open_basedir}
   ":/new/dir"</literal>.
  </para>
  <sect2 xml:id="configuration.file.scan">
   <title>اسکن  پوشه ها</title>

   <para>
    پس از خواندن &php.ini; امکان پیکربندی فایل های PHP برای اسکن فایل‌های .ini وجود دارد و  در زمان کامپایل می‌توان آن را تنظیم کرد.
    سپس با تنظیم متغیر محیطی <varname>PHP_INI_SCAN_DIR</varname>، دایرکتوری اسکن را می توان در زمان اجرا لغو کرد.
   </para>

   <para>
    اسکن چندین دایرکتوری با جدا کردن آنها با
    جداکننده مسیر مخصوص پلتفرم (<literal>;</literal> در Windows، NetWare
    و RISC OS امکانپذیر است;
    تمامی پلتفرم‌های دیگر؛ مقدار PHP است
    در تمامی پلتفرم‌های دیگر مقداری که PHP استفاده می کند به عنوان ثابت <constant>PATH_SEPARATOR</constant> در دسترس است.
    اگر پوشه خالی در <varname>PHP_INI_SCAN_DIR</varname> داده شود، PHP
    همچنین دایرکتوری داده شده در زمان کامپایل را از طریق  <option role="configure">--with-config-file-scan-dir</option> اسکن می کند.
   </para>

   <para>
    درون هر پوشه،‌ PHP تمام فایل ها با پسوند <literal>.ini</literal> را به ترتیب حروف الفبا اسکن می‌کند.
    لیستی از فایل هایی که بارگزاری شدند، ترتیب آنها با فراخوانی دستور  <function>php_ini_scanned_files</function> ،و یا با ران کردن PHP با گزینه <option>--ini</option> امکان‌پذیر است.
   </para>

   <informalexample>
    <screen>
<![CDATA[
با فرض پیکربرندی شدن PHP توسط --with-config-file-scan-dir=/etc/php.d,
و این آدرس جداکننده است : ...

$ php
  PHP تمام فایل های درون  /etc/php.d/*.ini را به عنوان فایل های پیکربندی بارگذاری می‌کند. 
  
$ PHP_INI_SCAN_DIR=/usr/local/etc/php.d php
  PHP تمام فای های در /usr/local/etc/php.d/*.ini را بع عنوان فایل های پیکربندی بارگذاری می‌کند.

$ PHP_INI_SCAN_DIR=:/usr/local/etc/php.d php
  PHP تمام فای های در /usr/local/etc/php.d/*.ini را بع عنوان فایل های پیکربندی بارگذاری می‌کند.

$ PHP_INI_SCAN_DIR=/usr/local/etc/php.d: php
  PHP تمام فای های در /usr/local/etc/php.d/*.ini را بع عنوان فایل های پیکربندی بارگذاری می‌کند.
]]>
    </screen>
   </informalexample>
  </sect2>
 </sect1>
 
 <sect1 xml:id="configuration.file.per-user">
  <title>.user.ini فایل های</title>
  
  <simpara>
   PHP پشتیبانی از پیکربندی فایل های INI را در پوشه بر اساس هر پوشه شامل می‌شود.
   این فایل  <emphasis>تنها</emphasis> توسط CGI/FastCGI SAPI پردازش می‌شوند.
   این عملکرد اساس فهرست برنامه افزودنی PECL htscanner را منسوخ می کند.
   اگر شما PHP را بر روی ماژول APACHE اجرا می‌کنید، از فایل های &htaccess; برای اثر مشابه استفاده کنید.
  </simpara>
  
  <simpara>
  علاوه‌بر کل فایل &php.ini; PHP با شروع از پوشه‌ای که فایل PHP درخواست شده در آن وجود دارد
    تا به پوشه فعلی روت (همانطور که در <varname>$_SERVER['DOCUMENT_ROOT']</varname> تنظیم شده است)
     برای تمام فایل ها با پسوند .ini اسکن می‌کند.
  </simpara>
  <simpara>
  تنها فایل های INI با تنظیمات حالت  <constant>PHP_INI_PERDIR</constant>  و  <constant>PHP_INI_USER</constant> توسط فایل های INI شناخته خواهندشد.
  </simpara>
  
  <simpara>
  دو دستورعمل جدید INI،
     <link linkend="ini.user-ini.filename">user_ini.filename</link> و
   <link linkend="ini.user-ini.cache-ttl">user_ini.cache_ttl</link>
   کنترل فایل های INI کاربر را به عهده می‌گیرند.
  </simpara>
  
  <simpara>

  <link linkend="ini.user-ini.filename">user_ini.filename</link> نام فایل مورد نظر PHP را در هر دایرکتوری تعیین می کند;
   اگر روی یک رشته خالی تنظیم شود، PHP اصلا اسکن نمی کند. را
   پیش فرض <literal>.user.ini</literal> است
  </simpara>
  
  <simpara>
   <link linkend="ini.user-ini.cache-ttl">user_ini.cache_ttl</link> تعداد دفعات بازخوانی فایل های INI کاربر را کنترل می کند. پیش فرض 300 ثانیه (5 دقیقه) است.
  </simpara>
 </sect1>
 
 <sect1 xml:id="configuration.changes.modes">
  <title>جایی که تنظیمات پیکربندی انجام می‌شود</title>
  
  <para>
  این حالت ها تایین می‌کنند که چه زمانی و چه مکانی دستوزعمل PHP 
  بتواند یا نتواند تنظیم شود، و هر دستورالعمل در دفترچه راهنما به یکی
   از این حالت ها اشاره دارد. به عنوان مثال، بعضی از تنظیمات ممکن است
   در اسکریپت PHP با استفاده از <function>ini_set</function>،
    تنظیم شوند، درحالیکه بقیه نیاز به &php.ini;، یا &httpd.conf; دارند.
  </para>
  
  <para>
   به عنوان مثال، 
   تنظیمات  <link linkend="ini.output-buffering">بافر خروحی </link> 
   <literal>PHP_INI_PERDIR</literal> است، بنابراین ممکن است با 
   <function>ini_set</function> تنظیم شود. اما، دستورعمل 
   <link linkend="ini.display-errors">display_errors</link> <literal>PHP_INI_ALL</literal> است
   بنابراین، می‌توانند هزجایی تنظیم شوند که شامل <function>ini_set</function>
   نیز می‌شود.
  </para>
  
  <para>
   <table>
    <title>تعریف حالت های PHP_INI_* </title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>حالت</entry>
       <entry>معنی</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>PHP_INI_USER</literal></entry>
       <entry>
       ورودی می‌تواند در اسکریپت کاربر (مانند <function>ini_set</function>)
       یا در لینک <link linkend="configuration.changes.windows">ثبت نام ویندوز</link>
    تنظیم شود.
    ورودی می‌تواند در &user-ini; تنظیم شود
       </entry>
      </row>
      <row>
       <entry><literal>PHP_INI_PERDIR</literal></entry>
       <entry>
        ورودی می‌تواند در  &php.ini;, &htaccess;, &httpd.conf; یا &user-ini; تنظیم شود.
       </entry>
      </row>
      <row>
       <entry><literal>PHP_INI_SYSTEM</literal></entry>
       <entry>ورودی می‌تواند در &php.ini; یا  &httpd.conf;</entry> تنظیم شود.
      </row>
      <row>
       <entry><literal>PHP_INI_ALL</literal></entry>
       <entry>ورودی می‌تواند همه جا تنظیم شود</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </sect1>
 
 <sect1 xml:id="configuration.changes">
  <title>چگونه تنظیمات پیکربندی را تغییر دهیم</title>
  
  <sect2 xml:id="configuration.changes.apache">
   <title>PHP را به عنوان ماژول APACHE اجرا می‌کنید</title>
   <simpara>
   هتکام استفاده از PHP به عنوان ماژول APACHE، شما همچنان می‌توانید
   تنظیمات پیکربندی را با استفاده از دستورعمل ها در فایل های (مثلا &httpd.conf;) 
   و &htaccess; پیکربندی APACHE تغییر دهید. شما نیاز به تنظیم دسترسی "AllowOverride Options"
   یا "AllowOverride All" برای انجام آن دارید.
   </simpara>
   
   <para>
   دستورعمل های متعددی در APACHE وجود دارند که به شما امکان تغییر پیکربندی PHP را
    در APACHE می‌دهند. برای لیستی از دستورعمل که <constant>PHP_INI_ALL</constant>، 
    یا <constant>PHP_INI_PERDIR</constant>، یا <constant>PHP_INI_SYSTEM</constant>,
    هستند، نکاهی بر پیوست  <link linkend="ini.list">لیست دستورعمل های php.ini</link> بندازید.
   </para>
   
   <para>
    <variablelist>
     <varlistentry>
      <term>
       <systemitem role="directive">php_value</systemitem>
       <parameter>name</parameter>
       <parameter>value</parameter>
      </term>
      <listitem>
       <para>
        Sets the value of the specified directive.
        Can be used only with <constant>PHP_INI_ALL</constant> and <constant>PHP_INI_PERDIR</constant> type directives.
        To clear a previously set value use <literal>none</literal> as the value.
       </para>
       <note>
        <simpara>
         Don't use <systemitem role="directive">php_value</systemitem> to set boolean values.
         <systemitem role="directive">php_flag</systemitem> (see below) should be used instead.
        </simpara>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <systemitem role="directive">php_flag</systemitem>
       <parameter>name</parameter>
       <parameter>on|off</parameter>
      </term>
      <listitem>
       <para>
        Used to set a boolean configuration directive.
        Can be used only with <constant>PHP_INI_ALL</constant> and
        <constant>PHP_INI_PERDIR</constant> type directives.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <systemitem role="directive">php_admin_value</systemitem>
       <parameter>name</parameter>
       <parameter>value</parameter>
      </term>
      <listitem>
       <para>
        Sets the value of the specified directive.
        This <emphasis>can not be used</emphasis> in &htaccess; files.
        Any directive type set with <systemitem role="directive">php_admin_value</systemitem>
        can not be overridden by &htaccess; or <function>ini_set</function>.
        To clear a previously set value use <literal>none</literal> as the value.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <systemitem role="directive">php_admin_flag</systemitem>
       <parameter>name</parameter>
       <parameter>on|off</parameter>
      </term>
      <listitem>
       <para>
        Used to set a boolean configuration directive.
        This <emphasis>can not be used</emphasis> in &htaccess; files.
        Any directive type set with <systemitem role="directive">php_admin_flag</systemitem>
        can not be overridden by &htaccess; or <function>ini_set</function>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   <para>
    <example>
     <title>Apache configuration example</title>
     <programlisting role="ini">
<![CDATA[
<IfModule mod_php5.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag engine on
</IfModule>
<IfModule mod_php4.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag engine on
</IfModule>
]]>
     </programlisting>
    </example>
   </para>
   <caution>
    <para>
     PHP constants do not exist outside of PHP. For example, in
     &httpd.conf; you can not use PHP constants
     such as <constant>E_ALL</constant> or <constant>E_NOTICE</constant>
     to set the <link linkend="ini.error-reporting">error_reporting</link>
     directive as they will have no meaning and will evaluate to
     <emphasis>0</emphasis>. Use the associated bitmask values instead.
     These constants can be used in &php.ini;
    </para>
   </caution>
  </sect2>
  
  <sect2 xml:id="configuration.changes.windows">
   <title>Changing PHP configuration via the Windows registry</title>
   <simpara>
    When running PHP on Windows, the configuration values can be
    modified on a per-directory basis using the Windows registry. The
    configuration values are stored in the registry key
    <literal>HKLM\SOFTWARE\PHP\Per Directory Values</literal>,
    in the sub-keys corresponding to the path names. For example, configuration
    values for the directory <literal>c:\inetpub\wwwroot</literal> would
    be stored in the key <literal>HKLM\SOFTWARE\PHP\Per Directory
    Values\c\inetpub\wwwroot</literal>. The settings for the
    directory would be active for any script running from this
    directory or any subdirectory of it. The values under the key
    should have the name of the PHP configuration directive and the
    string value. PHP constants in the values are not parsed.
    However, only configuration values changeable in
    <constant>PHP_INI_USER</constant> can be set
    this way, <constant>PHP_INI_PERDIR</constant> values can not,
    because these configuration values are re-read for each request.
   </simpara>
  </sect2>
  
  <sect2 xml:id="configuration.changes.other">
   <title>Other interfaces to PHP</title>
   <para>
    Regardless of how you run PHP, you can change certain values at runtime
    of your scripts through <function>ini_set</function>. See the documentation
    on the <function>ini_set</function> page for more information.
   </para>
   <para>
    If you are interested in a complete list of configuration settings
    on your system with their current values, you can execute the
    <function>phpinfo</function> function, and review the resulting
    page. You can also access the values of individual configuration
    directives at runtime using <function>ini_get</function> or
    <function>get_cfg_var</function>.
   </para>
  </sect2>
 </sect1>
 
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
